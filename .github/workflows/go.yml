name: Go
on:
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: './go.mod'
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            /home/runner/.cache/go-build/
            /home/runner/go/pkg/mod/
          key: GO_CACHE
      - name: Requirements
        run: sudo apt-get install upx-ucl
      - name: Build
        run: ./build.sh
      - name: Upload build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build_artifacts
          path: http-mock
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: './go.mod'
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            /home/runner/.cache/go-build/
            /home/runner/go/pkg/mod/
          key: GO_CACHE
      - name: test
        run: go test -timeout 360s -coverprofile=cover.out -covermode atomic github.com/slytomcat/http-mock --race -v
      - name: Format coverage
        run: go tool cover -html=cover.out -o coverage.html
      - name: Upload coverage to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage_artifacts
          path: coverage.html
  publish:
    needs: [build, test]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build_artifacts
      - name: draft new release and upload assets
        env: 
          GH_TOKEN: ${{ secrets.ACTION_TOKEN }}
        run: |
          gh release create "$(git branch --show-current)-$(git rev-parse --short HEAD)" ./http-mock
  push:
    needs: [build, test]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: http-mock
    steps:
      - uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build_artifacts
      - name: Log into github registry
        run: echo "${{ secrets.ACTION_TOKEN }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and Push image for github
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Get version
          chmod a+x http-mock
          VERSION=$(./http-mock -v | awk '{print $3}')
          echo "Building image $IMAGE_ID:$VERSION"
          docker build . --file dockerfile --tag $IMAGE_ID:$VERSION
          docker tag $IMAGE_ID:$VERSION $IMAGE_ID:latest
          # Push image to GitHub Packages.
          docker push --all-tags $IMAGE_ID
